/*"The span[class~="sr-only"] selector will select any span element whose class includes sr-only."*/
span[class~="sr-only"] {
  property: value;

}


/*The clip-path property determines the shape the clip property should take. 
Set both the clip-path and -webkit-clip-path properties to the value of inset(50%), forming the clip-path into a rectangle within the element.
clip-path. */

span[class~="sr-only"] {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  -webkit-clip-path: inset(50%);

}

///To prevent the text content from overflowing, give your span[class~="sr-only"] selector an overflow property set to hidden and 
a white-space property set to nowrap.///

/*The :first-of-type pseudo-selector is used to target the first element that matches the selector.*/

/*The last part of your table heading is your years. Create a #years selector, and enable flexbox. 
Justify the content to the end of the flex direction, and make the element sticky. 
Fix it to the top of its container with top: 0.
*/

#years {
  display: flex;
  top: 0;
  justify-content: flex-end;
  position: sticky;
}


/* The calc() function is a CSS function that allows you to calculate a value based on other values. 
For example, you can use it to calculate the width of the viewport minus the margin of an element: */

.example {
  margin: 10px;
  width: calc(100% - 20px);
}
/* Ensure your years do not get hidden by setting a z-index of 999. Then, give it a margin of 0 -2px, and a padding 
set to 0.5rem calc(1.25rem + 2px) 0.5rem 0. */

#years {
  display: flex;
  justify-content: flex-end;
  position: sticky;
  top: 0;
  background: #0a0a23;
  color: #fff;
  z-index: 999;
  margin: 0 -2px;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
}

/* The [attribute="value"] selector targets any element that has an attribute with a specific value. 
Create a tr[class="total"] selector to target specifically your tr elements with the total class.  */

/*The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type.*/

/*
change BG color on hover, tr[element] .total[class selector]
*/

tr.total:hover {
  background-color: #99c9ff;
}


span[class~="sr-only"] {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  clip-path: inset(50%) !important;
  -webkit-clip-path: inset(50%) !important;
  height: 1px !important;
  width: 1px !important;
  position: absolute !important;
  overflow: hidden !important;
  white-space: nowrap !important;
  padding: 0 !important;
  margin: -1px !important;
}

html {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #0a0a23;
}

h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}

h1 .flex {
  display: flex;
  flex-direction: column-reverse;
  gap: 1rem;
}

h1 .flex span:first-of-type {
  font-size: 0.7em;
}

h1 .flex span:last-of-type {
  font-size: 1.2em;
}

section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d0d5;
}

#years {
  display: flex;
  justify-content: flex-end;
  position: sticky;
  top: 0;
  background: #0a0a23;
  color: #fff;
  z-index: 999;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
  margin: 0 -2px;
}

#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}

.table-wrap {
  padding: 0 0.75rem 1.5rem 0.75rem;
}

table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  position: relative;
  margin-top: 3rem;
}

table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}

tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}

tbody th {
  width: calc(100% - 12rem);
}

tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}

tr.total td:nth-of-type(3) {
  padding-right: 0.5rem;
}

tr.total:hover {
  background-color: #99c9ff;
}

td.current {
  font-style: italic;
}

tr.data {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}

tr.data th .description {
  display: block;
  font-weight: normal;
  font-style: italic;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}

tr.data td {
  vertical-align: top;
  padding: 0.3rem 0.25rem 0;
  text-align: right;
}


/*The @media at-rule, also known as a media query, is used to conditionally apply CSS. 
Media queries are commonly used to apply CSS based on the viewport width using the max-width and min-width properties.*/

@media (max-width: 768px) {
  #piano {
    width: 358px;
  }

  .keys {
    width: 318px;
  }
}

/* Set overflow to hidden in the first .keys selector, to take care of this issue. STEP31
This property will hide any element that is pushed outside the set width value of .keys. */
